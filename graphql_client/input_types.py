# Generated by ariadne-codegen on 2023-05-16 16:35
# Source: schema.graphql

# Standard Library
from typing import (
    Any,
    Optional
)

# Third Party
from pydantic import Field

from .base_model import BaseModel
from .enums import (
    Day,
    IssueRelationType,
    ProjectNotificationSubscriptionType,
    ProjectUpdateHealthType,
    ProjectUpdateReminderFrequency,
    PushSubscriptionType,
    SlaStatus,
    UserRoleType,
    ViewPreferencesType,
    ViewType
)


class IssueImportMappingInput(BaseModel):
    users: Any | None
    workflow_states: Any | None = Field(alias="workflowStates")
    epics: Any | None


class SamlConfigurationInput(BaseModel):
    sso_signing_cert: str | None = Field(alias="ssoSigningCert")
    sso_endpoint: str | None = Field(alias="ssoEndpoint")
    sso_binding: str | None = Field(alias="ssoBinding")
    sso_sign_algo: str | None = Field(alias="ssoSignAlgo")
    issuer_entity_id: str | None = Field(alias="issuerEntityId")


class IntercomSettingsInput(BaseModel):
    send_note_on_status_change: bool | None = Field(alias="sendNoteOnStatusChange")
    send_note_on_comment: bool | None = Field(alias="sendNoteOnComment")
    automate_ticket_reopening_on_completion: bool | None = Field(alias="automateTicketReopeningOnCompletion")
    automate_ticket_reopening_on_cancellation: bool | None = Field(alias="automateTicketReopeningOnCancellation")
    automate_ticket_reopening_on_comment: bool | None = Field(alias="automateTicketReopeningOnComment")


class FrontSettingsInput(BaseModel):
    send_note_on_status_change: bool | None = Field(alias="sendNoteOnStatusChange")
    send_note_on_comment: bool | None = Field(alias="sendNoteOnComment")
    automate_ticket_reopening_on_completion: bool | None = Field(alias="automateTicketReopeningOnCompletion")
    automate_ticket_reopening_on_cancellation: bool | None = Field(alias="automateTicketReopeningOnCancellation")
    automate_ticket_reopening_on_comment: bool | None = Field(alias="automateTicketReopeningOnComment")


class SlackPostSettingsInput(BaseModel):
    channel: str
    channel_id: str = Field(alias="channelId")
    configuration_url: str = Field(alias="configurationUrl")


class GitHubSettingsInput(BaseModel):
    org_avatar_url: str = Field(alias="orgAvatarUrl")
    org_login: str = Field(alias="orgLogin")


class GoogleSheetsSettingsInput(BaseModel):
    spreadsheet_id: str = Field(alias="spreadsheetId")
    spreadsheet_url: str = Field(alias="spreadsheetUrl")
    sheet_id: float = Field(alias="sheetId")
    updated_issues_at: Any = Field(alias="updatedIssuesAt")


class JiraProjectDataInput(BaseModel):
    id: str
    key: str
    name: str


class JiraLinearMappingInput(BaseModel):
    jira_project_id: str = Field(alias="jiraProjectId")
    linear_team_id: str = Field(alias="linearTeamId")


class JiraSettingsInput(BaseModel):
    project_mapping: list["JiraLinearMappingInput"] | None = Field(alias="projectMapping")
    projects: list["JiraProjectDataInput"]


class NotionSettingsInput(BaseModel):
    workspace_id: str = Field(alias="workspaceId")
    workspace_name: str = Field(alias="workspaceName")


class SentrySettingsInput(BaseModel):
    organization_slug: str = Field(alias="organizationSlug")


class ZendeskSettingsInput(BaseModel):
    send_note_on_status_change: bool | None = Field(alias="sendNoteOnStatusChange")
    send_note_on_comment: bool | None = Field(alias="sendNoteOnComment")
    automate_ticket_reopening_on_completion: bool | None = Field(alias="automateTicketReopeningOnCompletion")
    automate_ticket_reopening_on_cancellation: bool | None = Field(alias="automateTicketReopeningOnCancellation")
    automate_ticket_reopening_on_comment: bool | None = Field(alias="automateTicketReopeningOnComment")
    subdomain: str
    url: str
    bot_user_id: str | None = Field(alias="botUserId")


class IntegrationSettingsInput(BaseModel):
    slack_post: Optional["SlackPostSettingsInput"] = Field(alias="slackPost")
    slack_project_post: Optional["SlackPostSettingsInput"] = Field(alias="slackProjectPost")
    slack_org_project_updates_post: Optional["SlackPostSettingsInput"] = Field(alias="slackOrgProjectUpdatesPost")
    google_sheets: Optional["GoogleSheetsSettingsInput"] = Field(alias="googleSheets")
    git_hub: Optional["GitHubSettingsInput"] = Field(alias="gitHub")
    sentry: Optional["SentrySettingsInput"]
    zendesk: Optional["ZendeskSettingsInput"]
    intercom: Optional["IntercomSettingsInput"]
    front: Optional["FrontSettingsInput"]
    jira: Optional["JiraSettingsInput"]
    notion: Optional["NotionSettingsInput"]


class BooleanComparator(BaseModel):
    eq: bool | None
    neq: bool | None


class DateComparator(BaseModel):
    eq: Any | None
    neq: Any | None
    in_: list[Any] | None = Field(alias="in")
    nin: list[Any] | None
    lt: Any | None
    lte: Any | None
    gt: Any | None
    gte: Any | None


class NullableDateComparator(BaseModel):
    eq: Any | None
    neq: Any | None
    in_: list[Any] | None = Field(alias="in")
    nin: list[Any] | None
    null: bool | None
    lt: Any | None
    lte: Any | None
    gt: Any | None
    gte: Any | None


class IDComparator(BaseModel):
    eq: str | None
    neq: str | None
    in_: list[str] | None = Field(alias="in")
    nin: list[str] | None


class StringComparator(BaseModel):
    eq: str | None
    neq: str | None
    in_: list[str] | None = Field(alias="in")
    nin: list[str] | None
    eq_ignore_case: str | None = Field(alias="eqIgnoreCase")
    neq_ignore_case: str | None = Field(alias="neqIgnoreCase")
    starts_with: str | None = Field(alias="startsWith")
    not_starts_with: str | None = Field(alias="notStartsWith")
    ends_with: str | None = Field(alias="endsWith")
    not_ends_with: str | None = Field(alias="notEndsWith")
    contains: str | None
    contains_ignore_case: str | None = Field(alias="containsIgnoreCase")
    not_contains: str | None = Field(alias="notContains")
    not_contains_ignore_case: str | None = Field(alias="notContainsIgnoreCase")


class NullableStringComparator(BaseModel):
    eq: str | None
    neq: str | None
    in_: list[str] | None = Field(alias="in")
    nin: list[str] | None
    null: bool | None
    eq_ignore_case: str | None = Field(alias="eqIgnoreCase")
    neq_ignore_case: str | None = Field(alias="neqIgnoreCase")
    starts_with: str | None = Field(alias="startsWith")
    not_starts_with: str | None = Field(alias="notStartsWith")
    ends_with: str | None = Field(alias="endsWith")
    not_ends_with: str | None = Field(alias="notEndsWith")
    contains: str | None
    contains_ignore_case: str | None = Field(alias="containsIgnoreCase")
    not_contains: str | None = Field(alias="notContains")
    not_contains_ignore_case: str | None = Field(alias="notContainsIgnoreCase")


class TeamFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    key: Optional["StringComparator"]
    description: Optional["NullableStringComparator"]
    issues: Optional["IssueCollectionFilter"]
    and_: list["TeamFilter"] | None = Field(alias="and")
    or_: list["TeamFilter"] | None = Field(alias="or")


class NumberComparator(BaseModel):
    eq: float | None
    neq: float | None
    in_: list[float] | None = Field(alias="in")
    nin: list[float] | None
    lt: float | None
    lte: float | None
    gt: float | None
    gte: float | None


class NullableNumberComparator(BaseModel):
    eq: float | None
    neq: float | None
    in_: list[float] | None = Field(alias="in")
    nin: list[float] | None
    null: bool | None
    lt: float | None
    lte: float | None
    gt: float | None
    gte: float | None


class UserFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    display_name: Optional["StringComparator"] = Field(alias="displayName")
    email: Optional["StringComparator"]
    active: Optional["BooleanComparator"]
    assigned_issues: Optional["IssueCollectionFilter"] = Field(alias="assignedIssues")
    admin: Optional["BooleanComparator"]
    is_me: Optional["BooleanComparator"] = Field(alias="isMe")
    and_: list["UserFilter"] | None = Field(alias="and")
    or_: list["UserFilter"] | None = Field(alias="or")


class NullableUserFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    display_name: Optional["StringComparator"] = Field(alias="displayName")
    email: Optional["StringComparator"]
    active: Optional["BooleanComparator"]
    assigned_issues: Optional["IssueCollectionFilter"] = Field(alias="assignedIssues")
    admin: Optional["BooleanComparator"]
    is_me: Optional["BooleanComparator"] = Field(alias="isMe")
    null: bool | None
    and_: list["NullableUserFilter"] | None = Field(alias="and")
    or_: list["NullableUserFilter"] | None = Field(alias="or")


class UserCollectionFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    display_name: Optional["StringComparator"] = Field(alias="displayName")
    email: Optional["StringComparator"]
    active: Optional["BooleanComparator"]
    assigned_issues: Optional["IssueCollectionFilter"] = Field(alias="assignedIssues")
    admin: Optional["BooleanComparator"]
    is_me: Optional["BooleanComparator"] = Field(alias="isMe")
    and_: list["UserCollectionFilter"] | None = Field(alias="and")
    or_: list["UserCollectionFilter"] | None = Field(alias="or")
    some: Optional["UserFilter"]
    every: Optional["UserFilter"]
    length: Optional["NumberComparator"]


class IssueLabelFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    creator: Optional["NullableUserFilter"]
    team: Optional["TeamFilter"]
    parent: Optional["IssueLabelFilter"]
    and_: list["IssueLabelFilter"] | None = Field(alias="and")
    or_: list["IssueLabelFilter"] | None = Field(alias="or")


class IssueLabelCollectionFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    creator: Optional["NullableUserFilter"]
    team: Optional["TeamFilter"]
    parent: Optional["IssueLabelFilter"]
    and_: list["IssueLabelCollectionFilter"] | None = Field(alias="and")
    or_: list["IssueLabelCollectionFilter"] | None = Field(alias="or")
    some: Optional["IssueLabelFilter"]
    every: Optional["IssueLabelFilter"]
    length: Optional["NumberComparator"]


class TimelessDateComparator(BaseModel):
    eq: Any | None
    neq: Any | None
    in_: list[Any] | None = Field(alias="in")
    nin: list[Any] | None
    lt: Any | None
    lte: Any | None
    gt: Any | None
    gte: Any | None


class NullableTimelessDateComparator(BaseModel):
    eq: Any | None
    neq: Any | None
    in_: list[Any] | None = Field(alias="in")
    nin: list[Any] | None
    null: bool | None
    lt: Any | None
    lte: Any | None
    gt: Any | None
    gte: Any | None


class CycleFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    number: Optional["NumberComparator"]
    name: Optional["StringComparator"]
    starts_at: Optional["DateComparator"] = Field(alias="startsAt")
    ends_at: Optional["DateComparator"] = Field(alias="endsAt")
    completed_at: Optional["DateComparator"] = Field(alias="completedAt")
    is_active: Optional["BooleanComparator"] = Field(alias="isActive")
    is_next: Optional["BooleanComparator"] = Field(alias="isNext")
    is_previous: Optional["BooleanComparator"] = Field(alias="isPrevious")
    is_future: Optional["BooleanComparator"] = Field(alias="isFuture")
    is_past: Optional["BooleanComparator"] = Field(alias="isPast")
    team: Optional["TeamFilter"]
    issues: Optional["IssueCollectionFilter"]
    and_: list["CycleFilter"] | None = Field(alias="and")
    or_: list["CycleFilter"] | None = Field(alias="or")


class NullableCycleFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    number: Optional["NumberComparator"]
    name: Optional["StringComparator"]
    starts_at: Optional["DateComparator"] = Field(alias="startsAt")
    ends_at: Optional["DateComparator"] = Field(alias="endsAt")
    completed_at: Optional["DateComparator"] = Field(alias="completedAt")
    is_active: Optional["BooleanComparator"] = Field(alias="isActive")
    is_next: Optional["BooleanComparator"] = Field(alias="isNext")
    is_previous: Optional["BooleanComparator"] = Field(alias="isPrevious")
    is_future: Optional["BooleanComparator"] = Field(alias="isFuture")
    is_past: Optional["BooleanComparator"] = Field(alias="isPast")
    team: Optional["TeamFilter"]
    issues: Optional["IssueCollectionFilter"]
    null: bool | None
    and_: list["NullableCycleFilter"] | None = Field(alias="and")
    or_: list["NullableCycleFilter"] | None = Field(alias="or")


class RoadmapFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    slug_id: Optional["StringComparator"] = Field(alias="slugId")
    creator: Optional["UserFilter"]
    and_: list["RoadmapFilter"] | None = Field(alias="and")
    or_: list["RoadmapFilter"] | None = Field(alias="or")


class RoadmapCollectionFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    slug_id: Optional["StringComparator"] = Field(alias="slugId")
    creator: Optional["UserFilter"]
    and_: list["RoadmapCollectionFilter"] | None = Field(alias="and")
    or_: list["RoadmapCollectionFilter"] | None = Field(alias="or")
    some: Optional["RoadmapFilter"]
    every: Optional["RoadmapFilter"]
    length: Optional["NumberComparator"]


class ProjectFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    slug_id: Optional["StringComparator"] = Field(alias="slugId")
    state: Optional["StringComparator"]
    start_date: Optional["NullableDateComparator"] = Field(alias="startDate")
    target_date: Optional["NullableDateComparator"] = Field(alias="targetDate")
    creator: Optional["UserFilter"]
    lead: Optional["NullableUserFilter"]
    members: Optional["UserFilter"]
    issues: Optional["IssueCollectionFilter"]
    roadmaps: Optional["RoadmapCollectionFilter"]
    and_: list["ProjectFilter"] | None = Field(alias="and")
    or_: list["ProjectFilter"] | None = Field(alias="or")


class NullableProjectFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    slug_id: Optional["StringComparator"] = Field(alias="slugId")
    state: Optional["StringComparator"]
    start_date: Optional["NullableDateComparator"] = Field(alias="startDate")
    target_date: Optional["NullableDateComparator"] = Field(alias="targetDate")
    creator: Optional["UserFilter"]
    lead: Optional["NullableUserFilter"]
    members: Optional["UserFilter"]
    issues: Optional["IssueCollectionFilter"]
    roadmaps: Optional["RoadmapCollectionFilter"]
    null: bool | None
    and_: list["NullableProjectFilter"] | None = Field(alias="and")
    or_: list["NullableProjectFilter"] | None = Field(alias="or")


class ProjectCollectionFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    slug_id: Optional["StringComparator"] = Field(alias="slugId")
    state: Optional["StringComparator"]
    start_date: Optional["NullableDateComparator"] = Field(alias="startDate")
    target_date: Optional["NullableDateComparator"] = Field(alias="targetDate")
    creator: Optional["UserFilter"]
    lead: Optional["NullableUserFilter"]
    members: Optional["UserFilter"]
    issues: Optional["IssueCollectionFilter"]
    roadmaps: Optional["RoadmapCollectionFilter"]
    and_: list["ProjectCollectionFilter"] | None = Field(alias="and")
    or_: list["ProjectCollectionFilter"] | None = Field(alias="or")
    some: Optional["ProjectFilter"]
    every: Optional["ProjectFilter"]
    length: Optional["NumberComparator"]


class WorkflowStateFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    name: Optional["StringComparator"]
    description: Optional["StringComparator"]
    position: Optional["NumberComparator"]
    type: Optional["StringComparator"]
    team: Optional["TeamFilter"]
    issues: Optional["IssueCollectionFilter"]
    and_: list["WorkflowStateFilter"] | None = Field(alias="and")
    or_: list["WorkflowStateFilter"] | None = Field(alias="or")


class SourceTypeComparator(BaseModel):
    eq: str | None
    neq: str | None
    in_: list[str] | None = Field(alias="in")
    nin: list[str] | None
    eq_ignore_case: str | None = Field(alias="eqIgnoreCase")
    neq_ignore_case: str | None = Field(alias="neqIgnoreCase")
    starts_with: str | None = Field(alias="startsWith")
    not_starts_with: str | None = Field(alias="notStartsWith")
    ends_with: str | None = Field(alias="endsWith")
    not_ends_with: str | None = Field(alias="notEndsWith")
    contains: str | None
    contains_ignore_case: str | None = Field(alias="containsIgnoreCase")
    not_contains: str | None = Field(alias="notContains")
    not_contains_ignore_case: str | None = Field(alias="notContainsIgnoreCase")


class AttachmentFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    title: Optional["StringComparator"]
    subtitle: Optional["NullableStringComparator"]
    url: Optional["StringComparator"]
    creator: Optional["NullableUserFilter"]
    source_type: Optional["SourceTypeComparator"] = Field(alias="sourceType")
    and_: list["AttachmentFilter"] | None = Field(alias="and")
    or_: list["AttachmentFilter"] | None = Field(alias="or")


class AttachmentCollectionFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    title: Optional["StringComparator"]
    subtitle: Optional["NullableStringComparator"]
    url: Optional["StringComparator"]
    creator: Optional["NullableUserFilter"]
    source_type: Optional["SourceTypeComparator"] = Field(alias="sourceType")
    and_: list["AttachmentCollectionFilter"] | None = Field(alias="and")
    or_: list["AttachmentCollectionFilter"] | None = Field(alias="or")
    some: Optional["AttachmentFilter"]
    every: Optional["AttachmentFilter"]
    length: Optional["NumberComparator"]


class CommentFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    body: Optional["StringComparator"]
    user: Optional["UserFilter"]
    issue: Optional["IssueFilter"]
    and_: list["CommentFilter"] | None = Field(alias="and")
    or_: list["CommentFilter"] | None = Field(alias="or")


class CommentCollectionFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    body: Optional["StringComparator"]
    user: Optional["UserFilter"]
    issue: Optional["IssueFilter"]
    and_: list["CommentCollectionFilter"] | None = Field(alias="and")
    or_: list["CommentCollectionFilter"] | None = Field(alias="or")
    some: Optional["CommentFilter"]
    every: Optional["CommentFilter"]
    length: Optional["NumberComparator"]


class ContentComparator(BaseModel):
    contains: str | None
    not_contains: str | None = Field(alias="notContains")


class EstimateComparator(BaseModel):
    eq: float | None
    neq: float | None
    in_: list[float] | None = Field(alias="in")
    nin: list[float] | None
    null: bool | None
    lt: float | None
    lte: float | None
    gt: float | None
    gte: float | None
    or_: list["NullableNumberComparator"] | None = Field(alias="or")
    and_: list["NullableNumberComparator"] | None = Field(alias="and")


class RelationExistsComparator(BaseModel):
    eq: bool | None
    neq: bool | None


class NullableProjectMilestoneFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    null: bool | None
    and_: list["NullableProjectMilestoneFilter"] | None = Field(alias="and")
    or_: list["NullableProjectMilestoneFilter"] | None = Field(alias="or")


class SlaStatusComparator(BaseModel):
    eq: SlaStatus | None
    neq: SlaStatus | None
    in_: list[SlaStatus] | None = Field(alias="in")
    nin: list[SlaStatus] | None
    null: bool | None


class NullableIssueFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    number: Optional["NumberComparator"]
    title: Optional["StringComparator"]
    description: Optional["NullableStringComparator"]
    priority: Optional["NullableNumberComparator"]
    estimate: Optional["EstimateComparator"]
    started_at: Optional["NullableDateComparator"] = Field(alias="startedAt")
    triaged_at: Optional["NullableDateComparator"] = Field(alias="triagedAt")
    completed_at: Optional["NullableDateComparator"] = Field(alias="completedAt")
    canceled_at: Optional["NullableDateComparator"] = Field(alias="canceledAt")
    auto_closed_at: Optional["NullableDateComparator"] = Field(alias="autoClosedAt")
    auto_archived_at: Optional["NullableDateComparator"] = Field(alias="autoArchivedAt")
    due_date: Optional["NullableTimelessDateComparator"] = Field(alias="dueDate")
    snoozed_until_at: Optional["NullableDateComparator"] = Field(alias="snoozedUntilAt")
    assignee: Optional["NullableUserFilter"]
    creator: Optional["NullableUserFilter"]
    parent: Optional["NullableIssueFilter"]
    snoozed_by: Optional["NullableUserFilter"] = Field(alias="snoozedBy")
    labels: Optional["IssueLabelCollectionFilter"]
    subscribers: Optional["UserCollectionFilter"]
    team: Optional["TeamFilter"]
    project_milestone: Optional["NullableProjectMilestoneFilter"] = Field(alias="projectMilestone")
    comments: Optional["CommentCollectionFilter"]
    cycle: Optional["NullableCycleFilter"]
    project: Optional["NullableProjectFilter"]
    state: Optional["WorkflowStateFilter"]
    children: Optional["IssueCollectionFilter"]
    attachments: Optional["AttachmentCollectionFilter"]
    searchable_content: Optional["ContentComparator"] = Field(alias="searchableContent")
    has_related_relations: Optional["RelationExistsComparator"] = Field(alias="hasRelatedRelations")
    has_duplicate_relations: Optional["RelationExistsComparator"] = Field(alias="hasDuplicateRelations")
    has_blocked_by_relations: Optional["RelationExistsComparator"] = Field(alias="hasBlockedByRelations")
    has_blocking_relations: Optional["RelationExistsComparator"] = Field(alias="hasBlockingRelations")
    sla_status: Optional["SlaStatusComparator"] = Field(alias="slaStatus")
    null: bool | None
    and_: list["NullableIssueFilter"] | None = Field(alias="and")
    or_: list["NullableIssueFilter"] | None = Field(alias="or")


class IssueFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    number: Optional["NumberComparator"]
    title: Optional["StringComparator"]
    description: Optional["NullableStringComparator"]
    priority: Optional["NullableNumberComparator"]
    estimate: Optional["EstimateComparator"]
    started_at: Optional["NullableDateComparator"] = Field(alias="startedAt")
    triaged_at: Optional["NullableDateComparator"] = Field(alias="triagedAt")
    completed_at: Optional["NullableDateComparator"] = Field(alias="completedAt")
    canceled_at: Optional["NullableDateComparator"] = Field(alias="canceledAt")
    auto_closed_at: Optional["NullableDateComparator"] = Field(alias="autoClosedAt")
    auto_archived_at: Optional["NullableDateComparator"] = Field(alias="autoArchivedAt")
    due_date: Optional["NullableTimelessDateComparator"] = Field(alias="dueDate")
    snoozed_until_at: Optional["NullableDateComparator"] = Field(alias="snoozedUntilAt")
    assignee: Optional["NullableUserFilter"]
    creator: Optional["NullableUserFilter"]
    parent: Optional["NullableIssueFilter"]
    snoozed_by: Optional["NullableUserFilter"] = Field(alias="snoozedBy")
    labels: Optional["IssueLabelCollectionFilter"]
    subscribers: Optional["UserCollectionFilter"]
    team: Optional["TeamFilter"]
    project_milestone: Optional["NullableProjectMilestoneFilter"] = Field(alias="projectMilestone")
    comments: Optional["CommentCollectionFilter"]
    cycle: Optional["NullableCycleFilter"]
    project: Optional["NullableProjectFilter"]
    state: Optional["WorkflowStateFilter"]
    children: Optional["IssueCollectionFilter"]
    attachments: Optional["AttachmentCollectionFilter"]
    searchable_content: Optional["ContentComparator"] = Field(alias="searchableContent")
    has_related_relations: Optional["RelationExistsComparator"] = Field(alias="hasRelatedRelations")
    has_duplicate_relations: Optional["RelationExistsComparator"] = Field(alias="hasDuplicateRelations")
    has_blocked_by_relations: Optional["RelationExistsComparator"] = Field(alias="hasBlockedByRelations")
    has_blocking_relations: Optional["RelationExistsComparator"] = Field(alias="hasBlockingRelations")
    sla_status: Optional["SlaStatusComparator"] = Field(alias="slaStatus")
    and_: list["IssueFilter"] | None = Field(alias="and")
    or_: list["IssueFilter"] | None = Field(alias="or")


class IssueCollectionFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    number: Optional["NumberComparator"]
    title: Optional["StringComparator"]
    description: Optional["NullableStringComparator"]
    priority: Optional["NullableNumberComparator"]
    estimate: Optional["EstimateComparator"]
    started_at: Optional["NullableDateComparator"] = Field(alias="startedAt")
    triaged_at: Optional["NullableDateComparator"] = Field(alias="triagedAt")
    completed_at: Optional["NullableDateComparator"] = Field(alias="completedAt")
    canceled_at: Optional["NullableDateComparator"] = Field(alias="canceledAt")
    auto_closed_at: Optional["NullableDateComparator"] = Field(alias="autoClosedAt")
    auto_archived_at: Optional["NullableDateComparator"] = Field(alias="autoArchivedAt")
    due_date: Optional["NullableTimelessDateComparator"] = Field(alias="dueDate")
    snoozed_until_at: Optional["NullableDateComparator"] = Field(alias="snoozedUntilAt")
    assignee: Optional["NullableUserFilter"]
    creator: Optional["NullableUserFilter"]
    parent: Optional["NullableIssueFilter"]
    snoozed_by: Optional["NullableUserFilter"] = Field(alias="snoozedBy")
    labels: Optional["IssueLabelCollectionFilter"]
    subscribers: Optional["UserCollectionFilter"]
    team: Optional["TeamFilter"]
    project_milestone: Optional["NullableProjectMilestoneFilter"] = Field(alias="projectMilestone")
    comments: Optional["CommentCollectionFilter"]
    cycle: Optional["NullableCycleFilter"]
    project: Optional["NullableProjectFilter"]
    state: Optional["WorkflowStateFilter"]
    children: Optional["IssueCollectionFilter"]
    attachments: Optional["AttachmentCollectionFilter"]
    searchable_content: Optional["ContentComparator"] = Field(alias="searchableContent")
    has_related_relations: Optional["RelationExistsComparator"] = Field(alias="hasRelatedRelations")
    has_duplicate_relations: Optional["RelationExistsComparator"] = Field(alias="hasDuplicateRelations")
    has_blocked_by_relations: Optional["RelationExistsComparator"] = Field(alias="hasBlockedByRelations")
    has_blocking_relations: Optional["RelationExistsComparator"] = Field(alias="hasBlockingRelations")
    sla_status: Optional["SlaStatusComparator"] = Field(alias="slaStatus")
    and_: list["IssueCollectionFilter"] | None = Field(alias="and")
    or_: list["IssueCollectionFilter"] | None = Field(alias="or")
    some: Optional["IssueFilter"]
    every: Optional["IssueFilter"]
    length: Optional["NumberComparator"]


class WorkflowCondition(BaseModel):
    issue_filter: Optional["IssueFilter"] = Field(alias="issueFilter")
    project_filter: Optional["ProjectFilter"] = Field(alias="projectFilter")


class EventCreateInput(BaseModel):
    category: str
    subject: str
    target_id: str | None = Field(alias="targetId")
    value: float | None
    data: Any | None


class ApiKeyCreateInput(BaseModel):
    id: str | None
    label: str
    key: str


class AttachmentCreateInput(BaseModel):
    id: str | None
    title: str
    subtitle: str | None
    url: str
    issue_id: str = Field(alias="issueId")
    icon_url: str | None = Field(alias="iconUrl")
    metadata: Any | None
    group_by_source: bool | None = Field(alias="groupBySource")
    comment_body: str | None = Field(alias="commentBody")
    comment_body_data: Any | None = Field(alias="commentBodyData")
    create_as_user: str | None = Field(alias="createAsUser")


class AttachmentUpdateInput(BaseModel):
    title: str
    subtitle: str | None
    metadata: Any | None
    icon_url: str | None = Field(alias="iconUrl")


class AuditEntryFilter(BaseModel):
    id: Optional["IDComparator"]
    created_at: Optional["DateComparator"] = Field(alias="createdAt")
    updated_at: Optional["DateComparator"] = Field(alias="updatedAt")
    type: Optional["StringComparator"]
    ip: Optional["StringComparator"]
    country_code: Optional["StringComparator"] = Field(alias="countryCode")
    actor: Optional["NullableUserFilter"]


class OnboardingCustomerSurvey(BaseModel):
    company_role: str | None = Field(alias="companyRole")
    company_size: str | None = Field(alias="companySize")


class CreateOrganizationInput(BaseModel):
    name: str
    url_key: str = Field(alias="urlKey")
    domain_access: bool | None = Field(alias="domainAccess")
    timezone: str | None
    utm: str | None


class JoinOrganizationInput(BaseModel):
    organization_id: str = Field(alias="organizationId")


class EmailUserAccountAuthChallengeInput(BaseModel):
    email: str
    is_desktop: bool | None = Field(alias="isDesktop")
    client_auth_code: str | None = Field(alias="clientAuthCode")
    signup_code: str | None = Field(alias="signupCode")


class TokenUserAccountAuthInput(BaseModel):
    email: str
    token: str
    timezone: str
    team_ids_to_join: list[str] | None = Field(alias="teamIdsToJoin")


class GoogleUserAccountAuthInput(BaseModel):
    code: str
    redirect_uri: str | None = Field(alias="redirectUri")
    timezone: str
    team_ids_to_join: list[str] | None = Field(alias="teamIdsToJoin")
    signup_code: str | None = Field(alias="signupCode")


class CommentCreateInput(BaseModel):
    id: str | None
    body: str | None
    body_data: Any | None = Field(alias="bodyData")
    issue_id: str = Field(alias="issueId")
    parent_id: str | None = Field(alias="parentId")
    create_as_user: str | None = Field(alias="createAsUser")
    display_icon_url: str | None = Field(alias="displayIconUrl")
    created_at: Any | None = Field(alias="createdAt")
    do_not_subscribe_to_issue: bool | None = Field(alias="doNotSubscribeToIssue")


class CommentUpdateInput(BaseModel):
    body: str | None
    body_data: Any | None = Field(alias="bodyData")


class ContactCreateInput(BaseModel):
    type: str
    message: str
    operating_system: str | None = Field(alias="operatingSystem")
    browser: str | None
    device: str | None
    client_version: str | None = Field(alias="clientVersion")
    disappointment_rating: int | None = Field(alias="disappointmentRating")


class ContactSalesCreateInput(BaseModel):
    name: str
    email: str
    message: str | None


class CustomViewCreateInput(BaseModel):
    id: str | None
    name: str
    description: str | None
    icon: str | None
    color: str | None
    team_id: str | None = Field(alias="teamId")
    owner_id: str | None = Field(alias="ownerId")
    filters: Any | None
    filter_data: Any | None = Field(alias="filterData")
    project_filter_data: Any | None = Field(alias="projectFilterData")
    shared: bool | None


class CustomViewUpdateInput(BaseModel):
    name: str | None
    description: str | None
    icon: str | None
    color: str | None
    team_id: str | None = Field(alias="teamId")
    owner_id: str | None = Field(alias="ownerId")
    filters: Any | None
    filter_data: Any | None = Field(alias="filterData")
    project_filter_data: Any | None = Field(alias="projectFilterData")
    shared: bool | None


class CycleCreateInput(BaseModel):
    id: str | None
    name: str | None
    description: str | None
    team_id: str = Field(alias="teamId")
    starts_at: Any = Field(alias="startsAt")
    ends_at: Any = Field(alias="endsAt")
    completed_at: Any | None = Field(alias="completedAt")


class CycleUpdateInput(BaseModel):
    name: str | None
    description: str | None
    starts_at: Any | None = Field(alias="startsAt")
    ends_at: Any | None = Field(alias="endsAt")
    completed_at: Any | None = Field(alias="completedAt")


class DocumentCreateInput(BaseModel):
    id: str | None
    title: str
    icon: str | None
    color: str | None
    content_data: Any | None = Field(alias="contentData")
    content: str | None
    project_id: str = Field(alias="projectId")


class DocumentUpdateInput(BaseModel):
    title: str | None
    icon: str | None
    color: str | None
    content_data: Any | None = Field(alias="contentData")
    content: str | None
    project_id: str | None = Field(alias="projectId")


class EmailSubscribeInput(BaseModel):
    email: str


class EmailUnsubscribeInput(BaseModel):
    type: str
    token: str
    user_id: str = Field(alias="userId")


class EmojiCreateInput(BaseModel):
    id: str | None
    name: str
    url: str


class FavoriteCreateInput(BaseModel):
    id: str | None
    folder_name: str | None = Field(alias="folderName")
    parent_id: str | None = Field(alias="parentId")
    issue_id: str | None = Field(alias="issueId")
    project_id: str | None = Field(alias="projectId")
    project_team_id: str | None = Field(alias="projectTeamId")
    predefined_view_type: str | None = Field(alias="predefinedViewType")
    predefined_view_team_id: str | None = Field(alias="predefinedViewTeamId")
    cycle_id: str | None = Field(alias="cycleId")
    custom_view_id: str | None = Field(alias="customViewId")
    document_id: str | None = Field(alias="documentId")
    roadmap_id: str | None = Field(alias="roadmapId")
    label_id: str | None = Field(alias="labelId")
    sort_order: float | None = Field(alias="sortOrder")


class FavoriteUpdateInput(BaseModel):
    sort_order: float | None = Field(alias="sortOrder")
    parent_id: str | None = Field(alias="parentId")
    folder_name: str | None = Field(alias="folderName")


class IntegrationRequestInput(BaseModel):
    email: str | None
    name: str


class JiraConfigurationInput(BaseModel):
    access_token: str = Field(alias="accessToken")
    email: str
    hostname: str
    project: str | None


class AirbyteConfigurationInput(BaseModel):
    api_key: str = Field(alias="apiKey")


class IntegrationsSettingsCreateInput(BaseModel):
    slack_issue_created: bool | None = Field(alias="slackIssueCreated")
    slack_issue_new_comment: bool | None = Field(alias="slackIssueNewComment")
    slack_issue_status_changed_done: bool | None = Field(alias="slackIssueStatusChangedDone")
    slack_issue_status_changed_all: bool | None = Field(alias="slackIssueStatusChangedAll")
    slack_project_update_created: bool | None = Field(alias="slackProjectUpdateCreated")
    slack_project_update_created_to_team: bool | None = Field(alias="slackProjectUpdateCreatedToTeam")
    slack_project_update_created_to_workspace: bool | None = Field(alias="slackProjectUpdateCreatedToWorkspace")
    slack_issue_added_to_triage: bool | None = Field(alias="slackIssueAddedToTriage")
    slack_issue_sla_high_risk: bool | None = Field(alias="slackIssueSlaHighRisk")
    slack_issue_sla_breached: bool | None = Field(alias="slackIssueSlaBreached")
    id: str | None
    team_id: str | None = Field(alias="teamId")
    project_id: str | None = Field(alias="projectId")


class IntegrationsSettingsUpdateInput(BaseModel):
    slack_issue_created: bool | None = Field(alias="slackIssueCreated")
    slack_issue_new_comment: bool | None = Field(alias="slackIssueNewComment")
    slack_issue_status_changed_done: bool | None = Field(alias="slackIssueStatusChangedDone")
    slack_issue_status_changed_all: bool | None = Field(alias="slackIssueStatusChangedAll")
    slack_project_update_created: bool | None = Field(alias="slackProjectUpdateCreated")
    slack_project_update_created_to_team: bool | None = Field(alias="slackProjectUpdateCreatedToTeam")
    slack_project_update_created_to_workspace: bool | None = Field(alias="slackProjectUpdateCreatedToWorkspace")
    slack_issue_added_to_triage: bool | None = Field(alias="slackIssueAddedToTriage")
    slack_issue_sla_high_risk: bool | None = Field(alias="slackIssueSlaHighRisk")
    slack_issue_sla_breached: bool | None = Field(alias="slackIssueSlaBreached")


class IntegrationTemplateCreateInput(BaseModel):
    id: str | None
    integration_id: str = Field(alias="integrationId")
    template_id: str = Field(alias="templateId")


class IssueImportUpdateInput(BaseModel):
    mapping: Any


class IssueLabelCreateInput(BaseModel):
    id: str | None
    name: str
    description: str | None
    color: str | None
    parent_id: str | None = Field(alias="parentId")
    team_id: str | None = Field(alias="teamId")


class IssueLabelUpdateInput(BaseModel):
    name: str | None
    description: str | None
    parent_id: str | None = Field(alias="parentId")
    color: str | None


class IssueRelationCreateInput(BaseModel):
    id: str | None
    type: IssueRelationType
    issue_id: str = Field(alias="issueId")
    related_issue_id: str = Field(alias="relatedIssueId")


class IssueRelationUpdateInput(BaseModel):
    type: str | None
    issue_id: str | None = Field(alias="issueId")
    related_issue_id: str | None = Field(alias="relatedIssueId")


class IssueCreateInput(BaseModel):
    id: str | None
    title: str
    description: str | None
    description_data: Any | None = Field(alias="descriptionData")
    assignee_id: str | None = Field(alias="assigneeId")
    parent_id: str | None = Field(alias="parentId")
    priority: int | None
    estimate: int | None
    subscriber_ids: list[str] | None = Field(alias="subscriberIds")
    label_ids: list[str] | None = Field(alias="labelIds")
    team_id: str = Field(alias="teamId")
    cycle_id: str | None = Field(alias="cycleId")
    project_id: str | None = Field(alias="projectId")
    project_milestone_id: str | None = Field(alias="projectMilestoneId")
    state_id: str | None = Field(alias="stateId")
    reference_comment_id: str | None = Field(alias="referenceCommentId")
    board_order: float | None = Field(alias="boardOrder")
    sort_order: float | None = Field(alias="sortOrder")
    sub_issue_sort_order: float | None = Field(alias="subIssueSortOrder")
    due_date: Any | None = Field(alias="dueDate")
    create_as_user: str | None = Field(alias="createAsUser")
    display_icon_url: str | None = Field(alias="displayIconUrl")
    created_at: Any | None = Field(alias="createdAt")
    sla_breaches_at: Any | None = Field(alias="slaBreachesAt")


class IssueUpdateInput(BaseModel):
    title: str | None
    description: str | None
    description_data: Any | None = Field(alias="descriptionData")
    assignee_id: str | None = Field(alias="assigneeId")
    parent_id: str | None = Field(alias="parentId")
    priority: int | None
    estimate: int | None
    subscriber_ids: list[str] | None = Field(alias="subscriberIds")
    label_ids: list[str] | None = Field(alias="labelIds")
    team_id: str | None = Field(alias="teamId")
    cycle_id: str | None = Field(alias="cycleId")
    project_id: str | None = Field(alias="projectId")
    project_milestone_id: str | None = Field(alias="projectMilestoneId")
    state_id: str | None = Field(alias="stateId")
    board_order: float | None = Field(alias="boardOrder")
    sort_order: float | None = Field(alias="sortOrder")
    sub_issue_sort_order: float | None = Field(alias="subIssueSortOrder")
    due_date: Any | None = Field(alias="dueDate")
    trashed: bool | None
    sla_breaches_at: Any | None = Field(alias="slaBreachesAt")
    snoozed_until_at: Any | None = Field(alias="snoozedUntilAt")
    snoozed_by_id: str | None = Field(alias="snoozedById")


class NotificationUpdateInput(BaseModel):
    read_at: Any | None = Field(alias="readAt")
    snoozed_until_at: Any | None = Field(alias="snoozedUntilAt")
    project_update_id: str | None = Field(alias="projectUpdateId")


class NotificationSubscriptionCreateInput(BaseModel):
    id: str | None
    team_id: str | None = Field(alias="teamId")
    project_id: str | None = Field(alias="projectId")
    project_notification_subscription_type: None | (ProjectNotificationSubscriptionType) = Field(alias="projectNotificationSubscriptionType")
    team_notification_subscription_types: list[str] | None = Field(alias="teamNotificationSubscriptionTypes")


class NotificationSubscriptionUpdateInput(BaseModel):
    project_notification_subscription_type: None | (ProjectNotificationSubscriptionType) = Field(alias="projectNotificationSubscriptionType")
    team_notification_subscription_types: list[str] | None = Field(alias="teamNotificationSubscriptionTypes")


class OrganizationDomainCreateInput(BaseModel):
    id: str | None
    name: str
    verification_email: str | None = Field(alias="verificationEmail")
    auth_type: str | None = Field(alias="authType", default="general")


class OrganizationDomainVerificationInput(BaseModel):
    organization_domain_id: str = Field(alias="organizationDomainId")
    verification_code: str = Field(alias="verificationCode")


class OrganizationInviteCreateInput(BaseModel):
    id: str | None
    email: str
    role: UserRoleType | None = UserRoleType.user
    message: str | None
    team_ids: list[str] | None = Field(alias="teamIds")


class OrganizationInviteUpdateInput(BaseModel):
    team_ids: list[str] = Field(alias="teamIds")


class UpdateOrganizationInput(BaseModel):
    name: str | None
    logo_url: str | None = Field(alias="logoUrl")
    url_key: str | None = Field(alias="urlKey")
    git_branch_format: str | None = Field(alias="gitBranchFormat")
    git_linkback_messages_enabled: bool | None = Field(alias="gitLinkbackMessagesEnabled")
    git_public_linkback_messages_enabled: bool | None = Field(alias="gitPublicLinkbackMessagesEnabled")
    roadmap_enabled: bool | None = Field(alias="roadmapEnabled")
    project_updates_reminder_frequency: None | (ProjectUpdateReminderFrequency) = Field(alias="projectUpdatesReminderFrequency")
    project_update_reminders_day: Day | None = Field(alias="projectUpdateRemindersDay")
    project_update_reminders_hour: float | None = Field(alias="projectUpdateRemindersHour")
    reduced_personal_information: bool | None = Field(alias="reducedPersonalInformation")
    oauth_app_review: bool | None = Field(alias="oauthAppReview")
    linear_preview_flags: Any | None = Field(alias="linearPreviewFlags")
    allowed_auth_services: list[str] | None = Field(alias="allowedAuthServices")
    sla_enabled: bool | None = Field(alias="slaEnabled")


class DeleteOrganizationInput(BaseModel):
    deletion_code: str = Field(alias="deletionCode")


class ProjectLinkCreateInput(BaseModel):
    id: str | None
    url: str
    label: str
    project_id: str = Field(alias="projectId")


class ProjectLinkUpdateInput(BaseModel):
    url: str | None
    label: str | None


class ProjectMilestoneCreateInput(BaseModel):
    id: str | None
    name: str
    description: str | None
    target_date: Any | None = Field(alias="targetDate")
    project_id: str = Field(alias="projectId")
    sort_order: float | None = Field(alias="sortOrder")


class ProjectMilestoneUpdateInput(BaseModel):
    name: str | None
    description: str | None
    target_date: Any | None = Field(alias="targetDate")
    project_id: str | None = Field(alias="projectId")
    sort_order: float | None = Field(alias="sortOrder")


class ProjectCreateInput(BaseModel):
    id: str | None
    name: str
    icon: str | None
    color: str | None
    state: str | None
    description: str | None
    team_ids: list[str] = Field(alias="teamIds")
    converted_from_issue_id: str | None = Field(alias="convertedFromIssueId")
    lead_id: str | None = Field(alias="leadId")
    member_ids: list[str] | None = Field(alias="memberIds")
    start_date: Any | None = Field(alias="startDate")
    target_date: Any | None = Field(alias="targetDate")
    sort_order: float | None = Field(alias="sortOrder")


class ProjectUpdateInput(BaseModel):
    state: str | None
    name: str | None
    description: str | None
    converted_from_issue_id: str | None = Field(alias="convertedFromIssueId")
    icon: str | None
    color: str | None
    team_ids: list[str] | None = Field(alias="teamIds")
    project_update_reminders_paused_until_at: Any | None = Field(alias="projectUpdateRemindersPausedUntilAt")
    lead_id: str | None = Field(alias="leadId")
    member_ids: list[str] | None = Field(alias="memberIds")
    start_date: Any | None = Field(alias="startDate")
    target_date: Any | None = Field(alias="targetDate")
    completed_at: Any | None = Field(alias="completedAt")
    canceled_at: Any | None = Field(alias="canceledAt")
    slack_new_issue: bool | None = Field(alias="slackNewIssue")
    slack_issue_comments: bool | None = Field(alias="slackIssueComments")
    slack_issue_statuses: bool | None = Field(alias="slackIssueStatuses")
    sort_order: float | None = Field(alias="sortOrder")


class ProjectUpdateInteractionCreateInput(BaseModel):
    id: str | None
    project_update_id: str = Field(alias="projectUpdateId")
    read_at: Any = Field(alias="readAt")


class ProjectUpdateCreateInput(BaseModel):
    id: str | None
    body: str | None
    body_data: Any | None = Field(alias="bodyData")
    project_id: str = Field(alias="projectId")
    health: ProjectUpdateHealthType | None


class ProjectUpdateUpdateInput(BaseModel):
    body: str | None
    body_data: Any | None = Field(alias="bodyData")
    health: ProjectUpdateHealthType | None


class PushSubscriptionCreateInput(BaseModel):
    id: str | None
    user_id: str = Field(alias="userId")
    data: str
    type: PushSubscriptionType | None = PushSubscriptionType.web


class ReactionCreateInput(BaseModel):
    id: str | None
    emoji: str | None
    comment_id: str | None = Field(alias="commentId")
    project_update_id: str | None = Field(alias="projectUpdateId")


class RoadmapCreateInput(BaseModel):
    id: str | None
    name: str
    description: str | None
    owner_id: str | None = Field(alias="ownerId")
    sort_order: float | None = Field(alias="sortOrder")
    color: str | None


class RoadmapUpdateInput(BaseModel):
    name: str | None
    description: str | None
    owner_id: str | None = Field(alias="ownerId")
    sort_order: float | None = Field(alias="sortOrder")
    color: str | None


class RoadmapToProjectCreateInput(BaseModel):
    id: str | None
    project_id: str = Field(alias="projectId")
    roadmap_id: str = Field(alias="roadmapId")
    sort_order: float | None = Field(alias="sortOrder")


class RoadmapToProjectUpdateInput(BaseModel):
    sort_order: float | None = Field(alias="sortOrder")


class TeamMembershipCreateInput(BaseModel):
    id: str | None
    user_id: str = Field(alias="userId")
    team_id: str = Field(alias="teamId")
    owner: bool | None
    sort_order: float | None = Field(alias="sortOrder")


class TeamMembershipUpdateInput(BaseModel):
    owner: bool | None
    sort_order: float | None = Field(alias="sortOrder")


class TeamCreateInput(BaseModel):
    id: str | None
    name: str
    description: str | None
    key: str | None
    icon: str | None
    color: str | None
    organization_id: str | None = Field(alias="organizationId")
    cycles_enabled: bool | None = Field(alias="cyclesEnabled")
    cycle_start_day: float | None = Field(alias="cycleStartDay")
    cycle_duration: int | None = Field(alias="cycleDuration")
    cycle_cooldown_time: int | None = Field(alias="cycleCooldownTime")
    cycle_issue_auto_assign_started: bool | None = Field(alias="cycleIssueAutoAssignStarted")
    cycle_issue_auto_assign_completed: bool | None = Field(alias="cycleIssueAutoAssignCompleted")
    cycle_lock_to_active: bool | None = Field(alias="cycleLockToActive")
    upcoming_cycle_count: float | None = Field(alias="upcomingCycleCount")
    triage_enabled: bool | None = Field(alias="triageEnabled")
    require_priority_to_leave_triage: bool | None = Field(alias="requirePriorityToLeaveTriage")
    timezone: str | None
    issue_ordering_no_priority_first: bool | None = Field(alias="issueOrderingNoPriorityFirst")
    issue_estimation_type: str | None = Field(alias="issueEstimationType")
    issue_estimation_allow_zero: bool | None = Field(alias="issueEstimationAllowZero")
    issue_sort_order_default_to_bottom: bool | None = Field(alias="issueSortOrderDefaultToBottom")
    issue_estimation_extended: bool | None = Field(alias="issueEstimationExtended")
    default_issue_estimate: float | None = Field(alias="defaultIssueEstimate")
    group_issue_history: bool | None = Field(alias="groupIssueHistory")
    default_template_for_members_id: str | None = Field(alias="defaultTemplateForMembersId")
    default_template_for_non_members_id: str | None = Field(alias="defaultTemplateForNonMembersId")
    private: bool | None
    auto_close_period: float | None = Field(alias="autoClosePeriod")
    auto_close_state_id: str | None = Field(alias="autoCloseStateId")
    auto_archive_period: float | None = Field(alias="autoArchivePeriod")
    marked_as_duplicate_workflow_state_id: str | None = Field(alias="markedAsDuplicateWorkflowStateId")


class TeamUpdateInput(BaseModel):
    name: str | None
    description: str | None
    key: str | None
    icon: str | None
    color: str | None
    cycles_enabled: bool | None = Field(alias="cyclesEnabled")
    cycle_start_day: float | None = Field(alias="cycleStartDay")
    cycle_duration: int | None = Field(alias="cycleDuration")
    cycle_cooldown_time: int | None = Field(alias="cycleCooldownTime")
    cycle_issue_auto_assign_started: bool | None = Field(alias="cycleIssueAutoAssignStarted")
    cycle_issue_auto_assign_completed: bool | None = Field(alias="cycleIssueAutoAssignCompleted")
    cycle_lock_to_active: bool | None = Field(alias="cycleLockToActive")
    cycle_enabled_start_week: str | None = Field(alias="cycleEnabledStartWeek")
    upcoming_cycle_count: float | None = Field(alias="upcomingCycleCount")
    timezone: str | None
    issue_ordering_no_priority_first: bool | None = Field(alias="issueOrderingNoPriorityFirst")
    issue_estimation_type: str | None = Field(alias="issueEstimationType")
    issue_estimation_allow_zero: bool | None = Field(alias="issueEstimationAllowZero")
    issue_sort_order_default_to_bottom: bool | None = Field(alias="issueSortOrderDefaultToBottom")
    issue_estimation_extended: bool | None = Field(alias="issueEstimationExtended")
    default_issue_estimate: float | None = Field(alias="defaultIssueEstimate")
    draft_workflow_state_id: str | None = Field(alias="draftWorkflowStateId")
    start_workflow_state_id: str | None = Field(alias="startWorkflowStateId")
    review_workflow_state_id: str | None = Field(alias="reviewWorkflowStateId")
    merge_workflow_state_id: str | None = Field(alias="mergeWorkflowStateId")
    slack_new_issue: bool | None = Field(alias="slackNewIssue")
    slack_issue_comments: bool | None = Field(alias="slackIssueComments")
    slack_issue_statuses: bool | None = Field(alias="slackIssueStatuses")
    group_issue_history: bool | None = Field(alias="groupIssueHistory")
    default_template_for_members_id: str | None = Field(alias="defaultTemplateForMembersId")
    default_template_for_non_members_id: str | None = Field(alias="defaultTemplateForNonMembersId")
    private: bool | None
    triage_enabled: bool | None = Field(alias="triageEnabled")
    require_priority_to_leave_triage: bool | None = Field(alias="requirePriorityToLeaveTriage")
    default_issue_state_id: str | None = Field(alias="defaultIssueStateId")
    auto_close_period: float | None = Field(alias="autoClosePeriod")
    auto_close_state_id: str | None = Field(alias="autoCloseStateId")
    auto_archive_period: float | None = Field(alias="autoArchivePeriod")
    marked_as_duplicate_workflow_state_id: str | None = Field(alias="markedAsDuplicateWorkflowStateId")


class TemplateCreateInput(BaseModel):
    id: str | None
    type: str
    team_id: str | None = Field(alias="teamId")
    name: str
    description: str | None
    template_data: Any = Field(alias="templateData")


class TemplateUpdateInput(BaseModel):
    name: str | None
    description: str | None
    team_id: str | None = Field(alias="teamId")
    template_data: Any | None = Field(alias="templateData")


class UpdateUserInput(BaseModel):
    name: str | None
    display_name: str | None = Field(alias="displayName")
    avatar_url: str | None = Field(alias="avatarUrl")
    active: bool | None
    disable_reason: str | None = Field(alias="disableReason")
    admin: bool | None
    description: str | None
    status_emoji: str | None = Field(alias="statusEmoji")
    status_label: str | None = Field(alias="statusLabel")
    status_until_at: Any | None = Field(alias="statusUntilAt")
    timezone: str | None


class UserSettingsUpdateInput(BaseModel):
    settings: Any | None
    unsubscribed_from: list[str] | None = Field(alias="unsubscribedFrom")
    notification_preferences: Any | None = Field(alias="notificationPreferences")


class ViewPreferencesCreateInput(BaseModel):
    id: str | None
    type: ViewPreferencesType
    view_type: ViewType = Field(alias="viewType")
    preferences: Any
    insights: Any | None
    team_id: str | None = Field(alias="teamId")
    project_id: str | None = Field(alias="projectId")
    roadmap_id: str | None = Field(alias="roadmapId")
    label_id: str | None = Field(alias="labelId")
    user_id: str | None = Field(alias="userId")
    cycle_id: str | None = Field(alias="cycleId")
    custom_view_id: str | None = Field(alias="customViewId")


class ViewPreferencesUpdateInput(BaseModel):
    preferences: Any | None
    insights: Any | None


class WebhookCreateInput(BaseModel):
    label: str | None
    id: str | None
    enabled: bool | None = True
    secret: str | None
    url: str
    resource_types: list[str] = Field(alias="resourceTypes")
    team_id: str | None = Field(alias="teamId")
    all_public_teams: bool | None = Field(alias="allPublicTeams")


class WebhookUpdateInput(BaseModel):
    label: str | None
    secret: str | None
    enabled: bool | None
    url: str | None
    resource_types: list[str] | None = Field(alias="resourceTypes")


class WorkflowStateCreateInput(BaseModel):
    id: str | None
    type: str
    name: str
    color: str
    description: str | None
    position: float | None
    team_id: str = Field(alias="teamId")


class WorkflowStateUpdateInput(BaseModel):
    name: str | None
    color: str | None
    description: str | None
    position: float | None


IssueImportMappingInput.update_forward_refs()
SamlConfigurationInput.update_forward_refs()
IntercomSettingsInput.update_forward_refs()
FrontSettingsInput.update_forward_refs()
SlackPostSettingsInput.update_forward_refs()
GitHubSettingsInput.update_forward_refs()
GoogleSheetsSettingsInput.update_forward_refs()
JiraProjectDataInput.update_forward_refs()
JiraLinearMappingInput.update_forward_refs()
JiraSettingsInput.update_forward_refs()
NotionSettingsInput.update_forward_refs()
SentrySettingsInput.update_forward_refs()
ZendeskSettingsInput.update_forward_refs()
IntegrationSettingsInput.update_forward_refs()
BooleanComparator.update_forward_refs()
DateComparator.update_forward_refs()
NullableDateComparator.update_forward_refs()
IDComparator.update_forward_refs()
StringComparator.update_forward_refs()
NullableStringComparator.update_forward_refs()
TeamFilter.update_forward_refs()
NumberComparator.update_forward_refs()
NullableNumberComparator.update_forward_refs()
UserFilter.update_forward_refs()
NullableUserFilter.update_forward_refs()
UserCollectionFilter.update_forward_refs()
IssueLabelFilter.update_forward_refs()
IssueLabelCollectionFilter.update_forward_refs()
TimelessDateComparator.update_forward_refs()
NullableTimelessDateComparator.update_forward_refs()
CycleFilter.update_forward_refs()
NullableCycleFilter.update_forward_refs()
RoadmapFilter.update_forward_refs()
RoadmapCollectionFilter.update_forward_refs()
ProjectFilter.update_forward_refs()
NullableProjectFilter.update_forward_refs()
ProjectCollectionFilter.update_forward_refs()
WorkflowStateFilter.update_forward_refs()
SourceTypeComparator.update_forward_refs()
AttachmentFilter.update_forward_refs()
AttachmentCollectionFilter.update_forward_refs()
CommentFilter.update_forward_refs()
CommentCollectionFilter.update_forward_refs()
ContentComparator.update_forward_refs()
EstimateComparator.update_forward_refs()
RelationExistsComparator.update_forward_refs()
NullableProjectMilestoneFilter.update_forward_refs()
SlaStatusComparator.update_forward_refs()
NullableIssueFilter.update_forward_refs()
IssueFilter.update_forward_refs()
IssueCollectionFilter.update_forward_refs()
WorkflowCondition.update_forward_refs()
EventCreateInput.update_forward_refs()
ApiKeyCreateInput.update_forward_refs()
AttachmentCreateInput.update_forward_refs()
AttachmentUpdateInput.update_forward_refs()
AuditEntryFilter.update_forward_refs()
OnboardingCustomerSurvey.update_forward_refs()
CreateOrganizationInput.update_forward_refs()
JoinOrganizationInput.update_forward_refs()
EmailUserAccountAuthChallengeInput.update_forward_refs()
TokenUserAccountAuthInput.update_forward_refs()
GoogleUserAccountAuthInput.update_forward_refs()
CommentCreateInput.update_forward_refs()
CommentUpdateInput.update_forward_refs()
ContactCreateInput.update_forward_refs()
ContactSalesCreateInput.update_forward_refs()
CustomViewCreateInput.update_forward_refs()
CustomViewUpdateInput.update_forward_refs()
CycleCreateInput.update_forward_refs()
CycleUpdateInput.update_forward_refs()
DocumentCreateInput.update_forward_refs()
DocumentUpdateInput.update_forward_refs()
EmailSubscribeInput.update_forward_refs()
EmailUnsubscribeInput.update_forward_refs()
EmojiCreateInput.update_forward_refs()
FavoriteCreateInput.update_forward_refs()
FavoriteUpdateInput.update_forward_refs()
IntegrationRequestInput.update_forward_refs()
JiraConfigurationInput.update_forward_refs()
AirbyteConfigurationInput.update_forward_refs()
IntegrationsSettingsCreateInput.update_forward_refs()
IntegrationsSettingsUpdateInput.update_forward_refs()
IntegrationTemplateCreateInput.update_forward_refs()
IssueImportUpdateInput.update_forward_refs()
IssueLabelCreateInput.update_forward_refs()
IssueLabelUpdateInput.update_forward_refs()
IssueRelationCreateInput.update_forward_refs()
IssueRelationUpdateInput.update_forward_refs()
IssueCreateInput.update_forward_refs()
IssueUpdateInput.update_forward_refs()
NotificationUpdateInput.update_forward_refs()
NotificationSubscriptionCreateInput.update_forward_refs()
NotificationSubscriptionUpdateInput.update_forward_refs()
OrganizationDomainCreateInput.update_forward_refs()
OrganizationDomainVerificationInput.update_forward_refs()
OrganizationInviteCreateInput.update_forward_refs()
OrganizationInviteUpdateInput.update_forward_refs()
UpdateOrganizationInput.update_forward_refs()
DeleteOrganizationInput.update_forward_refs()
ProjectLinkCreateInput.update_forward_refs()
ProjectLinkUpdateInput.update_forward_refs()
ProjectMilestoneCreateInput.update_forward_refs()
ProjectMilestoneUpdateInput.update_forward_refs()
ProjectCreateInput.update_forward_refs()
ProjectUpdateInput.update_forward_refs()
ProjectUpdateInteractionCreateInput.update_forward_refs()
ProjectUpdateCreateInput.update_forward_refs()
ProjectUpdateUpdateInput.update_forward_refs()
PushSubscriptionCreateInput.update_forward_refs()
ReactionCreateInput.update_forward_refs()
RoadmapCreateInput.update_forward_refs()
RoadmapUpdateInput.update_forward_refs()
RoadmapToProjectCreateInput.update_forward_refs()
RoadmapToProjectUpdateInput.update_forward_refs()
TeamMembershipCreateInput.update_forward_refs()
TeamMembershipUpdateInput.update_forward_refs()
TeamCreateInput.update_forward_refs()
TeamUpdateInput.update_forward_refs()
TemplateCreateInput.update_forward_refs()
TemplateUpdateInput.update_forward_refs()
UpdateUserInput.update_forward_refs()
UserSettingsUpdateInput.update_forward_refs()
ViewPreferencesCreateInput.update_forward_refs()
ViewPreferencesUpdateInput.update_forward_refs()
WebhookCreateInput.update_forward_refs()
WebhookUpdateInput.update_forward_refs()
WorkflowStateCreateInput.update_forward_refs()
WorkflowStateUpdateInput.update_forward_refs()
