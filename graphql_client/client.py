# Generated by ariadne-codegen on 2023-05-16 16:35
# Source: queries.graphql

from .base_client import BaseClient
from .base_model import (
    UNSET,
    UnsetType
)
from .input_types import (
    IssueUpdateInput,
    WorkflowStateFilter
)
from .issue import Issue
from .issue_update import IssueUpdate
from .state import State


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def issue(self, issue_id: str) -> Issue:
        query = gql(
            """
            query Issue($issueId: String!) {
              issue(id: $issueId) {
                id
                title
                state {
                  name
                  type
                  id
                  description
                  color
                }
                assignee {
                  id
                  name
                  displayName
                  url
                  email
                }
                url
                identifier
              }
            }
            """
        )
        variables: dict[str, object] = {"issueId": issue_id}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return Issue.parse_obj(data)

    def state(self, filter: WorkflowStateFilter | None | UnsetType = UNSET) -> State:
        query = gql(
            """
            query State($filter: WorkflowStateFilter) {
              workflowStates(filter: $filter) {
                nodes {
                  id
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"filter": filter}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return State.parse_obj(data)

    def issue_update(self, input: IssueUpdateInput, issue_id: str) -> IssueUpdate:
        query = gql(
            """
            mutation IssueUpdate($input: IssueUpdateInput!, $issueId: String!) {
              issueUpdate(id: $issueId, input: $input) {
                success
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input, "issueId": issue_id}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return IssueUpdate.parse_obj(data)
