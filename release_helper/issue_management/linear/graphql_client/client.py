# Generated by ariadne-codegen
# Source: release_helper/issue_management/linear/queries.graphql

from typing import Any, Dict, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .input_types import IssueUpdateInput, WorkflowStateFilter
from .issue import Issue
from .issue_update import IssueUpdate
from .state import State


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def issue(self, issue_id: str, **kwargs: Any) -> Issue:
        query = gql(
            """
            query Issue($issueId: String!) {
              issue(id: $issueId) {
                id
                title
                state {
                  name
                  type
                  id
                  description
                  color
                }
                assignee {
                  id
                  name
                  displayName
                  url
                  email
                }
                url
                identifier
              }
            }
            """
        )
        variables: Dict[str, object] = {"issueId": issue_id}
        response = self.execute(
            query=query, operation_name="Issue", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Issue.model_validate(data)

    def state(
        self,
        filter: Union[Optional[WorkflowStateFilter], UnsetType] = UNSET,
        **kwargs: Any
    ) -> State:
        query = gql(
            """
            query State($filter: WorkflowStateFilter) {
              workflowStates(filter: $filter) {
                nodes {
                  id
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"filter": filter}
        response = self.execute(
            query=query, operation_name="State", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return State.model_validate(data)

    def issue_update(
        self, input: IssueUpdateInput, issue_id: str, **kwargs: Any
    ) -> IssueUpdate:
        query = gql(
            """
            mutation IssueUpdate($input: IssueUpdateInput!, $issueId: String!) {
              issueUpdate(id: $issueId, input: $input) {
                success
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "issueId": issue_id}
        response = self.execute(
            query=query, operation_name="IssueUpdate", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return IssueUpdate.model_validate(data)
